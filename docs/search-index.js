var searchIndex = JSON.parse('{\
"mu":{"doc":"A wrapper merging the official `lambda_runtime` and the…","i":[[0,"alb","mu","An AWS Application Load Balancer abstraction to handle…",null,null],[3,"Request","mu::alb","`AlbTargetGroupRequest` contains data originating from the…",null,null],[12,"http_method","","",0,null],[12,"path","","",0,null],[12,"query_string_parameters","","",0,null],[12,"multi_value_query_string_parameters","","",0,null],[12,"headers","","",0,null],[12,"multi_value_headers","","",0,null],[12,"request_context","","",0,null],[12,"is_base64_encoded","","",0,null],[12,"body","","",0,null],[3,"RequestContext","","`AlbTargetGroupRequestContext` contains the information to…",null,null],[12,"elb","","",1,null],[3,"Response","","`AlbTargetGroupResponse` configures the response to be…",null,null],[12,"status_code","","",2,null],[12,"status_description","","",2,null],[12,"headers","","",2,null],[12,"multi_value_headers","","",2,null],[12,"body","","",2,null],[12,"is_base64_encoded","","",2,null],[3,"ElbContext","","`ElbContext` contains the information to identify the ARN…",null,null],[12,"target_group_arn","","",3,null],[0,"runtime","","",null,null],[5,"listen_events","mu::alb::runtime","Listen to ALB events. Unlike mu::lambda::listen_events,…",null,[[]]],[0,"response","mu::alb","",null,null],[5,"create_json_from_optional","mu::alb::response","Creates an ALB-compatible response wrapping an optional…",null,[[["option",4]],["response",3]]],[5,"create_json_from_obj","","Creates an ALB-compatible response wrapping a…",null,[[],["response",3]]],[5,"create_json","","Creates an ALB-compatible response wrapping an optional…",null,[[["string",3],["option",4]],["response",3]]],[5,"create_plain_text","","Creates an ALB-compatible response wrapping an optional…",null,[[["string",3],["option",4]],["response",3]]],[5,"create_with_content_type","","",null,[[["string",3],["option",4]],["response",3]]],[5,"create","","Creates a normalised mu::alb::Response, taking care of a…",null,[[["string",3],["map",6],["option",4]],["response",3]]],[0,"content_types","","Known content types.",null,null],[17,"JSON","mu::alb::response::content_types","",null,null],[17,"PLAIN_TEXT","","",null,null],[0,"headers","mu::alb::response","",null,null],[5,"create_for_optional","mu::alb::response::headers","Creates a single entry header for the given header_name…",null,[[["option",4]],["map",6]]],[5,"create_for","","Creates a single entry header for the given header_name…",null,[[],["map",6]]],[6,"Map","","",null,null],[17,"CONTENT_TYPE","","",null,null],[17,"LOCATION","","",null,null],[0,"serializer","mu::alb","",null,null],[8,"AlbSerialize","mu::alb::serializer","Serialize ordinary structures and enums into an ALB valid…",null,null],[10,"to_alb_response","","",4,[[],["response",3]]],[0,"deserializer","mu::alb","",null,null],[8,"AlbDeserialize","mu::alb::deserializer","",null,null],[10,"from_alb_request","","",5,[[["context",3],["request",3]],[["result",4],["lambdaerror",3]]]],[8,"RpcRequest","","",null,null],[0,"lambda","mu","A decorator module that provides consistent API for…",null,null],[3,"Context","mu::lambda","The Lambda function execution context. The values in this…",null,null],[12,"request_id","","The AWS request ID generated by the Lambda service.",6,null],[12,"deadline","","The execution deadline for the current invocation in…",6,null],[12,"invoked_function_arn","","The ARN of the Lambda function being invoked.",6,null],[12,"xray_trace_id","","The X-Ray trace ID for the current invocation.",6,null],[12,"client_context","","The client context object sent by the AWS mobile SDK. This…",6,null],[12,"identity","","The Cognito identity that invoked the function. This field…",6,null],[12,"env_config","","Lambda function configuration from the local environment…",6,null],[8,"Handler","","A trait describing an asynchronous function `A` to `B.",null,null],[16,"Error","","Errors returned by this handler.",7,null],[16,"Fut","","The future response value of this handler.",7,null],[10,"call","","Process the incoming event and `Context` then return the…",7,[[["context",3]]]],[3,"LambdaError","","A struct to hold errors resulting from the Lambda…",null,null],[5,"listen_events","","Listen for AWS Lambda requests of a given A type. This…",null,[[]]],[6,"LambdaResult","","A custom result type that assumes LambdaError as error type.",null,null],[6,"RuntimeResult","","The default lambda runtime result type. It will be…",null,null],[11,"new","","",8,[[],["lambdaerror",3]]],[11,"from_alb_request","mu::alb","",0,[[["albtargetgrouprequest",3],["context",3]],[["result",4],["lambdaerror",3]]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","mu::lambda","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"borrow_mut","","",6,[[]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"to_string","","",8,[[],["string",3]]],[11,"borrow","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"borrow_mut","","",8,[[]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"deserialize","mu::alb","",0,[[],[["albtargetgrouprequest",3],["result",4]]]],[11,"deserialize","","",3,[[],[["result",4],["elbcontext",3]]]],[11,"deserialize","","",2,[[],[["result",4],["albtargetgroupresponse",3]]]],[11,"deserialize","","",1,[[],[["albtargetgrouprequestcontext",3],["result",4]]]],[11,"fmt","","",3,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",1,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",0,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",2,[[["formatter",3]],[["error",3],["result",4]]]],[11,"serialize","","",0,[[],["result",4]]],[11,"serialize","","",3,[[],["result",4]]],[11,"serialize","","",2,[[],["result",4]]],[11,"serialize","","",1,[[],["result",4]]],[11,"clone","","",1,[[],["albtargetgrouprequestcontext",3]]],[11,"clone","","",3,[[],["elbcontext",3]]],[11,"clone","","",2,[[],["albtargetgroupresponse",3]]],[11,"clone","","",0,[[],["albtargetgrouprequest",3]]],[11,"eq","","",1,[[["albtargetgrouprequestcontext",3]]]],[11,"ne","","",1,[[["albtargetgrouprequestcontext",3]]]],[11,"eq","","",3,[[["elbcontext",3]]]],[11,"ne","","",3,[[["elbcontext",3]]]],[11,"eq","","",2,[[["albtargetgroupresponse",3]]]],[11,"ne","","",2,[[["albtargetgroupresponse",3]]]],[11,"eq","","",0,[[["albtargetgrouprequest",3]]]],[11,"ne","","",0,[[["albtargetgrouprequest",3]]]],[11,"try_from","mu::lambda","",6,[[["headermap",3],["headervalue",3]],[["result",4],["context",3]]]],[11,"eq","","",6,[[["context",3]]]],[11,"ne","","",6,[[["context",3]]]],[11,"default","","",6,[[],["context",3]]],[11,"fmt","","",6,[[["formatter",3]],[["error",3],["result",4]]]],[11,"clone","","",6,[[],["context",3]]],[11,"to_alb_response","mu::alb","",2,[[],["albtargetgroupresponse",3]]],[11,"to_alb_response","mu::lambda","",8,[[],["response",3]]],[11,"from_alb_request","mu::alb","",0,[[["context",3],["request",3]],[["result",4],["request",3],["lambdaerror",3]]]],[11,"fmt","mu::lambda","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["formatterresult",6]]]],"p":[[3,"Request"],[3,"RequestContext"],[3,"Response"],[3,"ElbContext"],[8,"AlbSerialize"],[8,"AlbDeserialize"],[3,"Context"],[8,"Handler"],[3,"LambdaError"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);