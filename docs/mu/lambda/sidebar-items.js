initSidebarItems({"fn":[["listen_events","Listen for AWS Lambda requests of a given A type. This method doesn't enforce any contract aside of the fact it expects a std::result::Result<B, Error> as a return value. It also expects the handler function to be async."]],"struct":[["Context","The Lambda function execution context. The values in this struct are populated using the Lambda environment variables and the headers returned by the poll request to the Runtime APIs."],["LambdaError","A struct to hold errors resulting from the Lambda initialization. As the original lambda codebase made the type Error private to its crate it was required to create a wrapper to hold the received error message received from the original Lambda. Otherwise, we might have to create our own Error type (that matches the original contract)."]],"trait":[["Handler","A trait describing an asynchronous function `A` to `B."]],"type":[["LambdaResult","A custom result type that assumes LambdaError as error type."],["RuntimeResult","The default lambda runtime result type. It will be returned by all listener functions, and can be used as return type for your main function."]]});